{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2ad8a028-e3a2-4bf9-a0f1-d876c62d6aeb",
   "metadata": {},
   "source": [
    "# PDF Power Hacks: Everything You Didn’t Know You Could Do with Python and Your PDF Files  \n",
    "### 🛡️ DIY in AI: Protect your data. Don’t upload it anywhere.\n",
    "\n",
    "# 🐍 Python | Batch Convert JPG, PNG, EPS to PDF 🖼️📄\n",
    "\n",
    "## ❓Ever had to organize hundreds of image files just to send a report? 😩  \n",
    "Dragging each one into an online tool is tedious — and not exactly secure.\n",
    "\n",
    "## 👉 Solution  \n",
    "📦 Batch image-to-PDF conversion using Python and PIL.  \n",
    "💡 Works locally, supports JPG, PNG, EPS formats.\n",
    "\n",
    "## 🔧 How does it work?  \n",
    "📂 Point to a folder with your images.  \n",
    "🧹 Filter files by extension.  \n",
    "🎨 Convert each to RGB for compatibility.  \n",
    "📄 Save each as an individual PDF or merge all into one.  \n",
    "\n",
    "## 🔎 Why does it matter?  \n",
    "🔒 Keeps sensitive visuals offline.  \n",
    "⏱️ Cuts manual work to seconds.  \n",
    "📈 Improves consistency in documentation.\n",
    "\n",
    "## ✨ Real-world example:  \n",
    "🧪 A lab generates 120+ microscope images per day.  \n",
    "📁 They automate the PDF packaging for compliance reports — fast, reproducible, no cloud.\n",
    "\n",
    "## ⚙️ Business impact:  \n",
    "💼 Standardizes outputs for clients and auditors  \n",
    "📉 Reduces errors in manual formatting  \n",
    "⏱️ Speeds up file delivery cycles  \n",
    "\n",
    "## 📊 Code summary  \n",
    "📂 Reads all images in a folder  \n",
    "🖼️ Converts to RGB to avoid format issues  \n",
    "📄 Saves one PDF per image and a merged version  \n",
    "\n",
    "🔗[Github](https://github.com/jcombari/AI-For-Unstructured-Data/tree/main/PDF%20Power%20Hacks)\n",
    "\n",
    "## 💭 Thought:  \n",
    "How many hours do you spend organizing files manually? What would you automate next?\n",
    "\n",
    "🔑 #Python #DataScience #Pillow #Automation #PDFprocessing #DataPrivacy #DigitalWorkflows #AItools #TechCareers #DIYinAI  \n",
    "\n",
    "🔁 If you found this post useful, feel free to share it with your network.  \n",
    "⚠️ Please do not copy or repost it as your own. Respect original work.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "be968bd1-933b-4cd7-a1a9-802bf1b64537",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ['PATH'] += r\";C:\\Program Files\\gs\\gs10.05.1\\bin\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8926e930-351d-4d4c-9486-e75c853e5c87",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "from pathlib import Path\n",
    "\n",
    "# Define input and output folders\n",
    "input_dir = Path(\"202507220_input_images\")\n",
    "output_dir = Path(\"202507220_output_pdfs\")\n",
    "output_dir.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "# Valid image extensions\n",
    "valid_exts = [\".jpg\", \".jpeg\", \".png\", \".eps\"]\n",
    "\n",
    "# List to collect image objects for merging\n",
    "images_for_merge = []\n",
    "\n",
    "# Iterate over image files in the input folder\n",
    "for img_path in input_dir.glob(\"*\"):\n",
    "    if img_path.suffix.lower() in valid_exts:\n",
    "        # Open the image and convert to RGB (required for PDF)\n",
    "        img = Image.open(img_path).convert(\"RGB\")\n",
    "        \n",
    "        # Save individual PDF with proper prefix\n",
    "        pdf_name = output_dir / f\"202507220_{img_path.stem}.pdf\"\n",
    "        img.save(pdf_name, \"PDF\")\n",
    "\n",
    "        # Append to list for combined PDF\n",
    "        images_for_merge.append(img)\n",
    "\n",
    "# Save all images into a single PDF if any found\n",
    "if images_for_merge:\n",
    "    merged_pdf_path = output_dir / \"202507220_combined_images.pdf\"\n",
    "    images_for_merge[0].save(\n",
    "        merged_pdf_path,\n",
    "        save_all=True,\n",
    "        append_images=images_for_merge[1:]\n",
    "    )\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
